// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TierList.Persistence.Postgres;

#nullable disable

namespace TierList.Persistence.Postgres.Migrations
{
    [DbContext(typeof(TierListDbContext))]
    [Migration("20250630091118_ImageStoresGuidForStorageAccess")]
    partial class ImageStoresGuidForStorageAccess
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TierList.Domain.Entities.TierImageContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContainerType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<int>("TierListId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TierListId");

                    b.ToTable("Container", (string)null);

                    b.HasDiscriminator<string>("ContainerType").HasValue("TierImageContainer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TierList.Domain.Entities.TierImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContainerId")
                        .HasColumnType("integer");

                    b.Property<string>("Note")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("StorageKey")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("TierList.Domain.Entities.TierListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("List", (string)null);
                });

            modelBuilder.Entity("TierList.Domain.Entities.TierBackupRowEntity", b =>
                {
                    b.HasBaseType("TierList.Domain.Entities.TierImageContainer");

                    b.HasDiscriminator().HasValue("TierBackupRow");
                });

            modelBuilder.Entity("TierList.Domain.Entities.TierRowEntity", b =>
                {
                    b.HasBaseType("TierList.Domain.Entities.TierImageContainer");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("TierRow");
                });

            modelBuilder.Entity("TierList.Domain.Entities.TierImageContainer", b =>
                {
                    b.HasOne("TierList.Domain.Entities.TierListEntity", "TierList")
                        .WithMany("Containers")
                        .HasForeignKey("TierListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TierList");
                });

            modelBuilder.Entity("TierList.Domain.Entities.TierImageEntity", b =>
                {
                    b.HasOne("TierList.Domain.Entities.TierImageContainer", "Container")
                        .WithMany("Images")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("TierList.Domain.Entities.TierImageContainer", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("TierList.Domain.Entities.TierListEntity", b =>
                {
                    b.Navigation("Containers");
                });
#pragma warning restore 612, 618
        }
    }
}
